{"name":"I3situation","tagline":"A replacement for i3status written in Python 3 with support for huge customisability through plugins.","body":"i3situation\r\n=============\r\n\r\nA replacement for i3status written in Python 3 with support for huge\r\ncustomisability through plugins.\r\n\r\nContents:\r\n\r\n* [Installation](#installation)\r\n* [Configuring Plugins](#configuring-plugins)\r\n* [Plugins](#plugins)\r\n* [Creating A Plugin](#creating-a-plugin)\r\n* [Advanced Plugin Options](#advanced-plugin-options)\r\n\r\nInstallation\r\n=============\r\n\r\nAt the moment, the way to install i3situation is in a manual manner. It is\r\nassumed that this repository has been\r\ncloned and that you're in the folder that it was cloned into.\r\n\r\n    sudo python3 setup.py install\r\n    mkdir ~/.config/i3situation\r\n    cp -r i3situation/plugins/ ~/.config/i3situation/\r\n    \r\nNext, use your editor of choice to create a configuration file.\r\n\r\n    vim ~/.config/i3situation/config\r\n    \r\nThe minimum that you need to enter in order to run the application is as\r\nfollows:\r\n\r\n    [general]\r\n    interval = 1\r\n    logging_level = ERROR\r\n    log_file = ~/.config/i3situation/log.txt\r\n  \r\nYou then need to change the status_command value in the bar section of your i3\r\nconfiguration to:\r\n\r\n    status_command i3situation\r\n    \r\nConfiguring Plugins\r\n=============\r\nPlugins are the way to get this application to output to i3bar and allow for large\r\namounts of expandability. The configuration file is automatically reloaded when\r\nany changes occur to it. Changing the content of a plugin file will also cause\r\na reload of all plugins and settings.\r\n\r\nPlugins are configured in the config file. You must first denote a new plugin\r\nconfig section by using a unique name for that instance of a plugin. For example:\r\n\r\n    [my_news_plugin]\r\n\r\nInside this section you need to say which plugin you wish to use (Note: the plugin\r\nfield refers to the filename of the plugin less the .py extension).\r\n\r\n    [my_news_plugin]\r\n    plugin = news\r\n    \r\nEach plugin needs to have an interval set. This interval refers to how often the\r\nplugin's displayed text is updated.\r\n\r\n    [my_news_plugin]\r\n    plugin = news\r\n    interval = 30\r\n    \r\nMany plugins also accept a menu_command. This is a command that is executed when\r\na plugin wishes to display a menu- allowing you to have extremely customisable\r\nmenus. The command should be a dzen2 command, the options available can be seen\r\n[here](https://github.com/robm/dzen/wiki/_pages). As an example, here is the menu\r\ncommand that I use with the date_time plugin:\r\n\r\n    [time]\r\n    plugin = date_time\r\n    color = #0d132b\r\n    menu_command = cal | dzen2 -y -30 -w 200 -l 7 -p -bg \"#70898f\" -fg \"#0d132b\" -e \"onstart=uncollapse;button1=exit\" -fn \"Inconsolata-dz for Powerline 10\" -ta c -sa c\r\n\r\nYou can specify the x position that dzen2 appears at by using the -x command line\r\nargument. Alternatively, i3situation can work out the correct x position so that\r\ndzen2 appears central to the mouse click and aligned to always be on the screen.\r\n\r\n    \r\nYou can then change the options for a plugin by defining them next. The available\r\noptions can be seen in the plugin file in a dictionary- with the defaults next to it.\r\n\r\nA list of values should be comma separated and a boolean value can be written as:\r\n\r\n- on\r\n- True\r\n- true\r\n- off\r\n- False\r\n- false\r\n\r\nThe example below illustrates using a comma separated list:\r\n\r\n    [my_news_plugin]\r\n    plugin = news\r\n    interval = 30\r\n    topics = uk,technology\r\n    \r\nYou can also edit options that affect how the output is displayed (Note: the\r\nsame options are available for all plugins). The following example illustrates\r\nchanging the colour of the output:\r\n\r\n    [my_news_plugin]\r\n    plugin = news\r\n    interval = 30\r\n    topics = uk,technology\r\n    color = #808080\r\n\r\nThe rest of the output options that can be edited are discussed in the Advanced Plugin \r\nOptions section of this document.\r\n\r\nMy personal i3situation configuration file can be found with my [dotfiles](https://github.com/harvey_hunt/dotfiles).\r\n    \r\nPlugins\r\n============\r\n\r\n* [News](#news)\r\n* [Cmus](#cmus)\r\n* [Date and Time](#date and time)\r\n* [Reddit](#reddit)\r\n* [Run](#run)\r\n* [Text](#text)\r\n* [Conky](#conky)\r\n\r\n## News\r\nThe news plugin displays news from the BBC website.\r\n\r\nOptions:\r\n* **Topics**: A comma seperated list of topics that shall be displayed.\r\n(A full list of topics can be found [here](http://api.bbcnews.appengine.co.uk/topics))\r\n\r\n```\r\ntopics=uk,technology\r\n```\r\n\r\n* **Format**: A string showing the format in which the output should be displayed.\r\n Keywords in the string will be replace with data. Possible keywords are time and news.\r\n\r\n```\r\nformat=news @ time\r\n```\r\n\r\n## Cmus\r\nA plugin to display information provided by Cmus (current song etc).\r\n\r\nOptions:\r\n* **Format**: A string showing the format in which the output should be displayed.\r\n Keywords in the string will be replaced with data. Possible keywords can be found [here](i3situation/plugins/cmus.py).\r\n\r\n```\r\nformat=artist -> title\r\n```\r\n\r\n## Date and Time\r\nA plugin to display the current date and time. Has support for multiple time zones.\r\n\r\nOptions:\r\n* **Time Zone**: The time zone that should be used when finding the time.\r\n\r\n```\r\ntime_zone=GMT\r\n```\r\n\r\n* **Long Format**: The text to display when there is a large amount of space. A full list of \r\nformat options can be found [here](http://docs.python.org/3/library/time.html#time.strftime)\r\n\r\n```\r\nlong_format=%d-%m-%Y %H:%M:%S\r\n```\r\n\r\n* **Short Format**: The text to be displayed when there is a smaller amount of bar space available.\r\n\r\n```\r\nshort_format=%H:%M:%S\r\n```\r\n\r\n##Reddit\r\nA plugin that can display information from Reddit, such as post titles and upvotes.\r\n\r\nOptions:\r\n* **Mode**: The mode that the plugin shall operate in. Front page will display threads from the \r\nfront page of Reddit or your personal front page (provided you have logged in).\r\n\r\n```\r\nmode=front\r\n```\r\n\r\n* **Subreddits**: The subreddits that should be displayed when the plugin is in subreddit mode. \r\nShould be in the form of a comma seperated list.\r\n\r\n```\r\nsubreddits=vim,python\r\n```\r\n\r\n* **Username**: Your Reddit username.\r\n\r\n```\r\nusername=segfaultless\r\n```\r\n\r\n* **Password**: Your Reddit password.\r\n\r\n```\r\npassword=lamepassword\r\n```\r\n\r\n* **Limit**: The amount of threads that should be requested from Reddit in one go.\r\n\r\n```\r\nlimit=25\r\n```\r\n\r\n* **Format**: The format that the plugin's output should be presented in. Keywords will \r\nbe replaced with actual data. For a full list of keywords, look [here](i3situation/plugins/reddit.py)\r\n\r\n```\r\nformat=subreddit title ups\r\n```\r\n\r\n* **Sort**: The method with which the Reddit threads are sorted.\r\n\r\n```\r\nsort=hot\r\n```\r\n\r\n## Run\r\nA plugin to run shell commands and send the output to i3bar.\r\n\r\n* **Command**: The command that is to be executed.\r\n\r\n```\r\ncommand=echo Hello\r\n```\r\n\r\n## Text\r\nA simple plugin to output text.\r\n\r\n* **Text**: The text that will be displayed.\r\n\r\n```\r\ntext=Hello World\r\n```\r\n\r\n## Conky\r\nA plugin to allow conky's output to be displayed. It is required that you have a valid .conkyrc\r\n\r\n* **Command**: The conky command to be executed.\r\n\r\n```\r\ncommand=$uptime\r\n```\r\n\r\n* **Config**: The path to the conkyrc file that shall be used.\r\n\r\n```\r\nconfig=~/.conkyrc\r\n```\r\n\r\nCreating a Plugin\r\n=============\r\n\r\nCreating a plugin is a simple process, made easier by the Plugin base class.\r\nThe first step is to create a python\r\nfile in your plugin directory. Note: Files with a leading underscore will not\r\nbe loaded as a plugin but can be\r\nused for library files.\r\n\r\n    vim cool_feature.py\r\n\r\nThe Plugin base class needs to be imported from the plugins folder.\r\n\r\n```python\r\nfrom plugins._plugin import Plugin\r\n```    \r\n\r\nYou should then create a class that inherits the newly imported Plugin class.\r\n\r\n```python\r\nfrom plugins._plugin import Plugin\r\n\r\n\r\nclass cool_feature_plugin(Plugin):\r\n```    \r\n\r\nThe \\_\\_all\\_\\_ variable needs to be set to the name of your plugin class.\r\n\r\n```python\r\nfrom plugins._plugin import Plugin\r\n\r\n__all__ = 'CoolFeaturePlugin'\r\n\r\n\r\nclass CoolFeaturePlugin(Plugin):\r\n```\r\n\r\nThe \\_\\_init\\_\\_ function needs to accept two arguments- self and config. The\r\noptions that can be\r\nconfigured by the user need to be placed in a dictionary called self.options\r\nwith the format:\r\n\r\n```python\r\n{'option': 'default_value'}\r\n```\r\n\r\nOptions that can be configured by the user should be declared before calling\r\nthe super class'\r\n\\_\\_init\\_\\_ function.\r\n\r\nThe super class' \\_\\_init\\_\\_ function must be passed two arguments- config and\r\nthe user configurable\r\noptions. There is only one compulsary option- interval. This refers to how\r\noften (in seconds) the\r\nmain function of the plugin should be called.\r\n\r\n```python\r\nfrom plugins._plugin import Plugin\r\n\r\n__all__ = 'CoolFeaturePlugin'\r\n\r\n\r\nclass CoolFeaturePlugin(Plugin):\r\n\r\n    def __init__(self, config):\r\n        self.options = {'cool_option': 'cool_value', 'interval': 1}\r\n        super().__init__(config, self.options)\r\n```\r\n\r\nAll plugins must have a main() function that is called by the plugin loader.\r\nWithin this function,\r\nprogram logic should be executed and it should return a dictionary to the main\r\napplication. The \r\nPlugin base class provides a helper function called output that serves this\r\npurpose. Output should\r\nbe passed a string as the first argument that represents a detailed output of\r\nthe plugin and a shorter\r\nstring as the second argument. It is perfectly acceptable to pass the same\r\nvalue to each argument.\r\n\r\n```python\r\nfrom plugins._plugin import Plugin\r\n\r\n__all__ = 'CoolFeaturePlugin'\r\n\r\n\r\nclass CoolFeaturePlugin(Plugin):\r\n\r\n    def __init__(self, config):\r\n        self.options = {'cool_option': 'cool_value', 'interval': 1}\r\n        super().__init__(config, self.options)\r\n    \r\n    def main(self):\r\n        return self.output('This is a fabulous plugin', 'Cool plugin')\r\n```\r\n\r\nIt is also possible to create a function that gets executed whenever the plugin's output\r\nis clicked. The plugin must have an on_click() function that handles the event. The function\r\nmust accept an event dictionary as an argument- the layout of which is below:\r\n\r\n```\r\n{'button': 1, 'name': 'time', 'y': 1196, 'x': 1846}\r\n```\r\n\r\nThe button corresponds to which mouse button was used to click the text. The mouse buttons are \r\nnumbered as follows:\r\n\r\n1. Left Mouse Button\r\n2. Middle Mouse Button\r\n3. Right Mouse Button\r\n\r\nThe x and y variables refer to the position that the text was clicked at.\r\n\r\nThe name refers to the name of the plugin object that was clicked.\r\n\r\nIt is possible to do many things once the text has been clicked, but please bear in mind that\r\nthe on_click() code will be run in the same thread as the event handler. Therefore, it is important\r\nthat any code in on_click() isn't too intensive.\r\n\r\nAdding an on_click() function to the cool_feature_plugin looks as follows:\r\n\r\n```python\r\nfrom plugins._plugin import Plugin\r\n\r\n__all__ = 'CoolFeaturePlugin'\r\n\r\n\r\nclass CoolFeaturePlugin(Plugin):\r\n\r\n    def __init__(self, config):\r\n        self.options = {'cool_option': 'cool_value', 'interval': 1}\r\n        super().__init__(config, self.options)\r\n    \r\n    def main(self):\r\n        return self.output('This is a fabulous plugin', 'Cool plugin')\r\n    \r\n    def on_click(self, event):\r\n        if event['button'] == 1:\r\n            self.output_options['color'] = '#FF0000'\r\n        else:\r\n            self.output_options['color'] = '#0000FF'\r\n```\r\n\r\nIf you wish to allow users to display dzen menus when a click event occurs,\r\nyour plugin needs to call the display_dzen function. It accepts an integer\r\nrepresenting the x coordinate that the dzen window should appear at. Each\r\nplugin has the option menu_command. This option defaults to ''. This allows\r\nyou to have code such as the following:\r\n\r\n```python\r\nfrom plugins._plugin import Plugin\r\n\r\n__all__ = 'CoolFeaturePlugin'\r\n\r\n\r\nclass CoolFeaturePlugin(Plugin):\r\n\r\n    def __init__(self, config):\r\n        self.options = {'cool_option': 'cool_value', 'interval': 1}\r\n        super().__init__(config, self.options)\r\n    \r\n    def main(self):\r\n        return self.output('This is a fabulous plugin', 'Cool plugin')\r\n    \r\n    def on_click(self, event):\r\n        if event['button'] == 1:\r\n            if self.options['menu_command'] == '':\r\n                self.output_options['color'] = '#FF0000'\r\n            else:\r\n                self.display_dzen(event['x'])\r\n        else:\r\n            self.output_options['color'] = '#0000FF'\r\n```\r\n\r\nThis is all the code required to create a plugin. There are lots of good\r\nexamples of how to write\r\nplugins in this [project's plugin\r\ndirectory](https://github.com/harvey_hunt/i3situation/tree/master/i3situation/plugins)\r\n\r\nAdvanced Plugin Options\r\n=============\r\n\r\nIt is also possible to manipulate many aspects of a plugin's output. The Plugin\r\nclass provides\r\na way to set the value of output options (blocks). Changing values in the\r\nfollowing dictionary\r\nwill affect the output options:\r\n\r\n```python\r\nself.output_options['color'] = '#FF00FF'\r\n```\r\n\r\nThe following is the internal representation of output options used in the\r\nPlugin class.\r\n\r\n```python\r\nself.output_options = {\r\n    'color': None,\r\n    'min_width': None,\r\n    'align': None,\r\n    'name': None,\r\n    'urgent': None,\r\n    'seperator': None,\r\n    'seperator_block_width': None}\r\n```\r\n\r\nFor a full explanation of each output option, please refer to section 2.2 of\r\nthe excellent \r\ni3bar documentation:\r\n[i3Bar Protocol](http://i3wm.org/docs/i3bar-protocol.html)\r\n","google":"UA-47516994-1","note":"Don't delete this file! It's used internally to help with page regeneration."}